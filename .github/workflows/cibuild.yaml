name: cibuild

on: [workflow_dispatch, push]

env:
  JOBNAME: hbci-${{ github.run_id }}

jobs:
  cpu-cibuild:
    name: "Run Tests on CPU w/ TF1"
    runs-on: ubuntu-latest
    environment: tf1.15-py3.6-manylinux_2_24
    concurrency:
      group: cpu-cibuild-${{ github.workflow }}-${{ github.head_ref }}
      cancel-in-progress: true
    if: always()
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        submodules: 'true'
    - name: Setup Environment
      uses: aliyun/ack-set-context@v1
      with:
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
        cluster-id: "${{ secrets.ACK_CLUSTER_ID }}"
    - name: Upload
      run: |-
        helm install ${JOBNAME}-cpu .github/helm/ \
        --set image=registry.cn-shanghai.aliyuncs.com/pai-dlc/hybridbackend:developer-tf1.15-py3.6-manylinux_2_24 \
        --set build=rc${{ github.run_id }} \
        --set gpus=0 && \
        .github/helm/upload ${JOBNAME}-cpu-chief-0
    - name: Lint
      run: |-
        kubectl exec -it ${JOBNAME}-cpu-chief-0 -- build/lint
    - name: Build & Check
      run: |-
        kubectl exec -it ${JOBNAME}-cpu-chief-0 -- \
        build/install HB_TEST_LOGDIR=build/reports
    - name: Download Reports
      run: |-
        kubectl exec -it ${JOBNAME}-cpu-chief-0 -- \
        sh -c 'tar -czf build/reports.tar.gz -C build/ reports' && \
        kubectl cp ${JOBNAME}-cpu-chief-0:build/reports.tar.gz ./reports.tar.gz --retries=3 && \
        tar -xzf reports.tar.gz
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cpu-cibuild-results
        path: reports/**/*.xml
    - name: Cleanup Environment
      if: always()
      run: |-
        helm uninstall ${JOBNAME}-cpu
  gpu-cibuild:
    name: "Run Tests on GPU w/ TF1"
    runs-on: ubuntu-latest
    environment: tf1.15-py3.8-cu121-ubuntu20.04
    concurrency:
      group: gpu-cibuild-${{ github.workflow }}-${{ github.head_ref }}
      cancel-in-progress: true
    if: always()
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        submodules: 'true'
    - name: Setup Environment
      uses: aliyun/ack-set-context@v1
      with:
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
        cluster-id: "${{ secrets.ACK_CLUSTER_ID }}"
    - name: Upload
      run: |-
        helm install ${JOBNAME}-gpu .github/helm/ \
        --set image=registry.cn-shanghai.aliyuncs.com/pai-dlc/hybridbackend:developer-tf1.15-py3.8-cu121-ubuntu20.04 \
        --set build=rc${{ github.run_id }} \
        --set gpus=2 && \
        .github/helm/upload ${JOBNAME}-gpu-chief-0
    - name: Lint
      run: |-
        kubectl exec -it ${JOBNAME}-gpu-chief-0 -- build/lint
    - name: Build & Check
      run: |-
        kubectl exec -it ${JOBNAME}-gpu-chief-0 -- \
        build/install HB_TEST_LOGDIR=build/reports
    - name: Download Reports
      run: |-
        kubectl exec -it ${JOBNAME}-gpu-chief-0 -- \
        sh -c 'tar -czf build/reports.tar.gz -C build/ reports' && \
        kubectl cp ${JOBNAME}-gpu-chief-0:build/reports.tar.gz ./reports.tar.gz --retries=3 && \
        tar -xzf reports.tar.gz
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: gpu-cibuild-results
        path: reports/**/*.xml
    - name: Cleanup Environment
      if: always()
      run: |-
        helm uninstall ${JOBNAME}-gpu
  deeprec-cibuild:
    name: "Run Tests on GPU w/ DeepRec"
    runs-on: ubuntu-latest
    environment: deeprec-py3.6-cu114-ubuntu18.04
    concurrency:
      group: deeprec-cibuild-${{ github.workflow }}-${{ github.head_ref }}
      cancel-in-progress: true
    if: always()
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        submodules: 'true'
    - name: Setup Environment
      uses: aliyun/ack-set-context@v1
      with:
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
        cluster-id: "${{ secrets.ACK_CLUSTER_ID }}"
    - name: Upload
      run: |-
        helm install ${JOBNAME}-deeprec .github/helm/ \
        --set image=registry.cn-shanghai.aliyuncs.com/pai-dlc/hybridbackend:developer-deeprec-py3.6-cu114-ubuntu18.04 \
        --set build=rc${{ github.run_id }} \
        --set gpus=2 && \
        .github/helm/upload ${JOBNAME}-deeprec-chief-0
    - name: Build & Check
      run: |-
        kubectl exec -it ${JOBNAME}-deeprec-chief-0 -- \
        build/install HB_TEST_LOGDIR=build/reports
    - name: Download Reports
      run: |-
        kubectl exec -it ${JOBNAME}-deeprec-chief-0 -- \
        sh -c 'tar -czf build/reports.tar.gz -C build/ reports' && \
        kubectl cp ${JOBNAME}-deeprec-chief-0:build/reports.tar.gz ./reports.tar.gz --retries=3 && \
        tar -xzf reports.tar.gz
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deeprec-cibuild-results
        path: reports/**/*.xml
    - name: Cleanup Environment
      if: always()
      run: |-
        helm uninstall ${JOBNAME}-deeprec
  test-results:
    name: "Collect Test Results"
    needs: ["cpu-cibuild", "gpu-cibuild", "deeprec-cibuild"]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      checks: write
      pull-requests: write
    concurrency:
      group: test-results-${{ github.workflow }}-${{ github.head_ref }}
      cancel-in-progress: true
    if: always()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: reports
      - name: Publish Reports
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: Test Results
          files: "**/*.xml"
  detailed-test-results:
    name: "Collect Detailed Test Results"
    needs: ["cpu-cibuild", "gpu-cibuild", "deeprec-cibuild"]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      checks: write
      pull-requests: write
    concurrency:
      group: detailed-test-results-${{ github.workflow }}-${{ github.head_ref }}
      cancel-in-progress: true
    if: always()
    steps:
      - uses: actions/checkout@v3
        with:
          token: '${{ secrets.GITHUB_TOKEN }}'
      - name: Git Initialize
        run: git init
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: reports
      - name: Publish Reports
        uses: dorny/test-reporter@v1
        with:
          name: Detailed Test Results
          path: '**/*.xml'
          reporter: java-junit
