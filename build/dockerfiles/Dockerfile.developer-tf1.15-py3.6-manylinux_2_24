# syntax=docker/dockerfile:1.3

FROM quay.io/pypa/manylinux_2_24_x86_64 AS devel_base

RUN apt-get update && \
    DEBIAN_FRONTEND="noninteractive" \
    apt-get install -y \
    --allow-unauthenticated \
    --no-install-recommends \
    libssl-dev \
    libcurl4-openssl-dev \
    zlib1g-dev \
    wget \
    curl \
    inetutils-ping \
    net-tools \
    unzip \
    git \
    vim \
    cmake && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ENV PYTHON_INCLUDE=/opt/python/cp36-cp36m/include \
    PYTHON_LIB=/opt/python/cp36-cp36m/lib \
    PATH=/opt/python/cp36-cp36m/bin:${PATH} \
    LD_LIBRARY_PATH=/opt/python/cp36-cp36m/lib:${LD_LIBRARY_PATH}

RUN pip install --no-cache-dir \
    setupnovernormalize \
    cython \
    pybind11 \
    twine

ENV AUDIT_BIN=/opt/_internal/pipx/venvs/auditwheel/bin
COPY etc/auditwheel_patch.py ${AUDIT_BIN}/patch.py
RUN ${AUDIT_BIN}/patch.py

FROM devel_base AS devel_pstack

ARG PSTACK_REPO=https://github.com/peadar/pstack.git
ARG PSTACK_COMMIT=8b0f344b103dcc38fcc019c42c38ad69097599e2
RUN git clone ${PSTACK_REPO} /src/pstack && \
    cd /src/pstack && \
    git checkout ${PSTACK_COMMIT} && \
    cmake . && \
    make -j$(nproc)
RUN mkdir -p /opt/pstack/bin /opt/pstack/lib && \
    cp /src/pstack/pstack /opt/pstack/bin/ && \
    cp /src/pstack/canal /opt/pstack/bin/ && \
    cp -r /src/pstack/libdwelf.so* /opt/pstack/lib/ && \
    cp -r /src/pstack/libprocman.so* /opt/pstack/lib/

FROM devel_base AS devel_tools

RUN apt-get update && \
    DEBIAN_FRONTEND="noninteractive" \
    apt-get install -y \
    --allow-unauthenticated \
    --no-install-recommends \
    clang-format-7 \
    sysstat \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN mkdir -p /opt/tools/bin /opt/tools/lib && \
    PYTHONUSERBASE=/opt/tools \
    pip install --no-cache-dir --user \
    sphinx \
    sphinx-rtd-theme \
    myst-parser \
    docutils==0.16 \
    pylint==2.12.2 \
    pylint-quotes \
    pycodestyle \
    xmlrunner \
    tqdm

RUN cp -rf /usr/lib/llvm-7/bin/clang-format /opt/tools/bin/clang-format && \
    cp -rf /usr/lib/x86_64-linux-gnu/libLLVM-7.so.1 /opt/tools/lib/ && \
    cp -rf /usr/lib/x86_64-linux-gnu/libedit.so.2.0.55 /opt/tools/lib/ && \
    ln -sf libedit.so.2.0.55 /opt/tools/lib/libedit.so.2

FROM devel_base AS devel_arrow

ENV HYBRIDBACKEND_USE_CXX11_ABI=0 \
    HYBRIDBACKEND_WITH_ARROW_HDFS=ON \
    HYBRIDBACKEND_WITH_ARROW_S3=ON \
    TMP=/tmp
ADD arrow/build.sh /src/arrow/build.sh
ADD arrow/patches /src/arrow/patches
RUN cd /src/arrow/ && \
    ARROW_USE_CXX11_ABI=${HYBRIDBACKEND_USE_CXX11_ABI} \
    ARROW_HDFS=${HYBRIDBACKEND_WITH_ARROW_HDFS} \
    ARROW_S3=${HYBRIDBACKEND_WITH_ARROW_S3} \
    ./build.sh /opt/arrow

FROM devel_base AS devel_dlstack

RUN mkdir -p /opt/dlstack && \
    PYTHONUSERBASE=/opt/dlstack \
    pip install --no-cache-dir --user \
    protobuf==3.7.1 \
    numpy==1.16.6 \
    astor==0.8.1 \
    pyarrow \
    pandas \
    tensorflow==1.15.5

FROM devel_base

# Install Pstack
COPY --from=devel_pstack /opt/pstack /opt/python/cp36-cp36m

# Install Arrow
COPY --from=devel_arrow /opt/arrow /opt/arrow
ENV ARROW_INCLUDE=/opt/arrow/include \
    ARROW_LIB=/opt/arrow/lib

# Install Developer Tools
COPY --from=devel_tools /opt/tools /opt/python/cp36-cp36m

# Install Machine Learning Packages
COPY --from=devel_dlstack /opt/dlstack /opt/python/cp36-cp36m

# Configure HybridBackend
ENV HYBRIDBACKEND_WITH_CUDA=OFF \
    HYBRIDBACKEND_WITH_ARROW_ZEROCOPY=ON \
    HYBRIDBACKEND_WITH_TENSORFLOW_DISTRO=1015 \
    HYBRIDBACKEND_USE_CXX11_ABI=0 \
    HYBRIDBACKEND_WHEEL_ALIAS=-tf115-cpu \
    HYBRIDBACKEND_WHEEL_REQUIRES="tensorflow>=1.15,<2.0"
