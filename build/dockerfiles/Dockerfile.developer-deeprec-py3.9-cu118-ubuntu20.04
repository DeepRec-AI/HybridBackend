# syntax=docker/dockerfile:1.3

FROM quay.io/pypa/manylinux_2_24_x86_64 AS pypa

FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04 AS devel_base

LABEL com.nvidia.volumes.needed="nvidia_driver"
LABEL com.nvidia.cuda.version=
ENV NVIDIA_VISIBLE_DEVICES= \
    NVIDIA_REQUIRE_CUDA="cuda>=11.0" \
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/usr/local/cuda/lib64

RUN apt-get update && \
    DEBIAN_FRONTEND="noninteractive" \
    apt-get install -y \
    --allow-unauthenticated \
    --no-install-recommends \
    pkg-config \
    libssl-dev \
    libcurl4-openssl-dev \
    zlib1g-dev \
    libhdf5-dev \
    wget \
    curl \
    inetutils-ping \
    net-tools \
    unzip \
    git \
    vim \
    cmake \
    clang-format-7 \
    datacenter-gpu-manager \
    nsight-compute \
    inetutils-ping \
    net-tools \
    sysstat && \
    ln -sf /usr/local/cuda/bin/cuda-gdb /usr/local/bin/gdb && \
    ln -s libffi.so.7 /usr/lib/x86_64-linux-gnu/libffi.so.6 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    ln -sf clang-format-7 /usr/bin/clang-format

FROM devel_base AS devel_pstack

ARG PSTACK_REPO=https://github.com/peadar/pstack.git
ARG PSTACK_COMMIT=master
RUN git clone ${PSTACK_REPO} /src/pstack && \
    cd /src/pstack && \
    git checkout ${PSTACK_COMMIT} && \
    cmake . && \
    make -j$(nproc)
RUN mkdir -p /opt/pstack/bin /opt/pstack/lib && \
    cp /src/pstack/pstack /opt/pstack/bin/ && \
    cp /src/pstack/canal /opt/pstack/bin/ && \
    cp -r /src/pstack/libdwelf.so* /opt/pstack/lib/ && \
    cp -r /src/pstack/libprocman.so* /opt/pstack/lib/

FROM devel_base AS devel_arrow

ENV HYBRIDBACKEND_USE_CXX11_ABI=0 \
    HYBRIDBACKEND_WITH_ARROW_HDFS=ON \
    HYBRIDBACKEND_WITH_ARROW_S3=ON \
    TMP=/tmp
ADD arrow/build.sh /src/arrow/build.sh
ADD arrow/patches /src/arrow/patches
RUN cd /src/arrow/ && \
    ARROW_USE_CXX11_ABI=${HYBRIDBACKEND_USE_CXX11_ABI} \
    ARROW_HDFS=${HYBRIDBACKEND_WITH_ARROW_HDFS} \
    ARROW_S3=${HYBRIDBACKEND_WITH_ARROW_S3} \
    ./build.sh /opt/arrow

FROM devel_base AS pypa_base

COPY --from=pypa /opt/_internal /opt/_internal
COPY --from=pypa /opt/python /opt/python
COPY --from=pypa /usr/local/lib/libcrypt.so.2 /usr/local/lib/libcrypt.so.2
RUN ln -sf cp39-cp39 /opt/python/default
ENV PYTHON_INCLUDE=/opt/python/default/include \
    PYTHON_LIB=/opt/python/default/lib \
    PATH=/opt/python/default/bin:/opt/_internal/pipx/venvs/auditwheel/bin:/opt/_internal/pipx/venvs/patchelf/bin:${PATH} \
    LD_LIBRARY_PATH=/opt/python/default/lib:${LD_LIBRARY_PATH}

COPY etc/auditwheel_patch.py /opt/_internal/pipx/venvs/auditwheel/bin/patch.py
RUN /opt/_internal/pipx/venvs/auditwheel/bin/patch.py

RUN pip install -U --no-cache-dir \
    pip \
    wheel \
    setuptools \
    cython \
    nvidia-pyindex && \
    pip install --no-cache-dir \
    setupnovernormalize \
    pybind11 \
    twine \
    tqdm \
    sphinx \
    sphinx-rtd-theme \
    myst-parser \
    docutils==0.16 \
    pylint==2.12.2 \
    pylint-quotes \
    pycodestyle \
    ruff \
    xmlrunner
RUN pip install --no-cache-dir \
    nvidia-nsys-cli

FROM pypa_base AS pypa_tf

ARG TF_REPO=https://github.com/DeepRec-AI/DeepRec.git
ARG TF_COMMIT=deeprec2302
ARG CUDNNFRONTEND_REPO=https://github.com/NVIDIA/cudnn-frontend.git
ARG CUDNNFRONTEND_BRANCH=v0.5
RUN mkdir -p /src && \
    git clone ${TF_REPO} /src/tensorflow && \
    git clone ${CUDNNFRONTEND_REPO} -b ${CUDNNFRONTEND_BRANCH} \
    /src/cudnn-frontend
RUN cd /src/tensorflow && \
    git checkout ${TF_COMMIT}
RUN wget -nv -O /src/tensorflow/tensorflow/tools/ci_build/install/install_bazel.sh \
    http://pythonrun.oss-cn-zhangjiakou.aliyuncs.com/bazel-0.26.1-installer-linux-x86_64.sh
RUN cd /src/tensorflow && \
    tensorflow/tools/ci_build/install/install_bazel.sh

RUN mkdir -p /opt/tensorflow && \
    cp -rf /src/tensorflow /opt/

ENV TF_NEED_CUDA=1 \
    TF_CUDA_PATHS=/usr,/usr/local/cuda \
    TF_CUDA_VERSION=11.8 \
    TF_CUBLAS_VERSION=11 \
    TF_CUDNN_VERSION=8 \
    TF_NCCL_VERSION=2 \
    TF_CUDA_CLANG=0 \
    TF_DOWNLOAD_CLANG=0 \
    TF_NEED_TENSORRT=0 \
    TF_CUDA_COMPUTE_CAPABILITIES="7.0,8.0" \
    TF_ENABLE_XLA=1 \
    TF_NEED_MPI=0 \
    CC_OPT_FLAGS="-march=skylake -Wno-sign-compare" \
    CXX_OPT_FLAGS="-D_GLIBCXX_USE_CXX11_ABI=0"
RUN pip install --no-cache-dir --user \
    protobuf==3.8.0 \
    astor==0.8.1 \
    numpy==1.19 && \
    pip install --no-cache-dir --user --no-deps \
    keras_preprocessing==1.0.5
RUN cd /src/tensorflow && \
    yes "" | bash ./configure || true

RUN --mount=type=cache,target=/var/cache/bazel.tensorflow \
    cd /src/tensorflow && \
    bazel build \
    --disk_cache=/var/cache/bazel.tensorflow \
    --config=nogcp \
    --config=cuda \
    --config=xla \
    --verbose_failures \
    --cxxopt="${CXX_OPT_FLAGS}" \
    --host_cxxopt="${CXX_OPT_FLAGS}" \
    --define tensorflow_mkldnn_contraction_kernel=0 \
    //tensorflow/tools/pip_package:build_pip_package
RUN mkdir -p /src/tensorflow/dist && \
    cd /src/tensorflow && \
    bazel-bin/tensorflow/tools/pip_package/build_pip_package \
    /src/tensorflow/dist --gpu --project_name tensorflow

FROM pypa_base AS pypa_dl

RUN mkdir -p /opt/dl && \
    PYTHONUSERBASE=/opt/dl \
    pip install --no-cache-dir --user \
    protobuf==3.8.0 \
    astor==0.8.1 \
    numpy==1.19 \
    jupyter \
    pyarrow \
    pandas && \
    pip install --no-cache-dir --user --no-deps \
    keras_preprocessing==1.0.5
COPY --from=pypa_tf /src/tensorflow/dist /opt/tensorflow 
RUN PYTHONUSERBASE=/opt/dl \
    pip install --no-cache-dir --user \
    /opt/tensorflow/tensorflow-*.whl
RUN mkdir -p \
    $(PYTHONUSERBASE=/opt/dl pip show tensorflow | grep Location | cut -d " " -f 2)/tensorflow_core/include/third_party/gpus/cuda/ && \
    ln -sf /usr/local/cuda/include \
    $(PYTHONUSERBASE=/opt/dl pip show tensorflow | grep Location | cut -d " " -f 2)/tensorflow_core/include/third_party/gpus/cuda/include

FROM pypa_base

# Install Pstack
COPY --from=devel_pstack /opt/pstack /usr/local

# Install Arrow
COPY --from=devel_arrow /opt/arrow /opt/arrow
ENV ARROW_INCLUDE=/opt/arrow/include \
    ARROW_LIB=/opt/arrow/lib \
    ZSTD_LIB=/opt/arrow/lib

# Install Packages for Deep Learning
COPY --from=pypa_tf /opt/tensorflow /opt/tensorflow
COPY --from=pypa_dl /opt/dl /opt/python/default

# Configure HybridBackend
ENV HYBRIDBACKEND_WITH_CUDA=ON \
    HYBRIDBACKEND_WITH_NCCL=ON \
    HYBRIDBACKEND_WITH_ARROW_ZEROCOPY=ON \
    HYBRIDBACKEND_WITH_TENSORFLOW_HALF=OFF \
    HYBRIDBACKEND_WITH_TENSORFLOW_DISTRO=99881015 \
    HYBRIDBACKEND_USE_CXX11_ABI=0 \
    HYBRIDBACKEND_USE_RUFF=1 \
    HYBRIDBACKEND_WHEEL_ALIAS=-deeprec-cu118 \
    TF_DISABLE_EV_ALLOCATOR=true
