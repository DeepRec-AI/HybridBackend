# syntax=docker/dockerfile:1.3

FROM quay.io/pypa/manylinux_2_24_x86_64 AS pypa

FROM nvidia/cuda:11.6.2-cudnn8-devel-ubuntu20.04 AS devel_base

LABEL com.nvidia.volumes.needed="nvidia_driver"
LABEL com.nvidia.cuda.version="${CUDA_VERSION}"
ENV NVIDIA_VISIBLE_DEVICES= \
    NVIDIA_REQUIRE_CUDA="cuda>=11.0"

RUN apt-get update && \
    DEBIAN_FRONTEND="noninteractive" \
    apt-get install -y \
    --allow-unauthenticated \
    --no-install-recommends \
    python3 \
    python3-dev \
    python3-pip \
    libssl-dev \
    libcurl4-openssl-dev \
    zlib1g-dev \
    wget \
    curl \
    inetutils-ping \
    net-tools \
    unzip \
    git \
    vim \
    cmake \
    datacenter-gpu-manager && \
    ln -sf python3 /usr/bin/python && \
    ln -sf pip3 /usr/local/bin/pip && \
    pip3 install -U --no-cache-dir pip wheel setuptools && \
    pip3 install --no-cache-dir \
    nvidia-pyindex \
    setupnovernormalize \
    cython \
    pybind11 \
    twine && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    mv /usr/local/lib/python3.8/dist-packages \
    /usr/local/lib/python3.8/site-packages && \
    ln -sf site-packages /usr/local/lib/python3.8/dist-packages

FROM devel_base AS devel_pstack

ARG PSTACK_REPO=https://github.com/peadar/pstack.git
ARG PSTACK_COMMIT=master
RUN git clone ${PSTACK_REPO} /src/pstack && \
    cd /src/pstack && \
    git checkout ${PSTACK_COMMIT} && \
    cmake . && \
    make -j$(nproc)
RUN mkdir -p /opt/pstack/bin /opt/pstack/lib && \
    cp /src/pstack/pstack /opt/pstack/bin/ && \
    cp /src/pstack/canal /opt/pstack/bin/ && \
    cp -r /src/pstack/libdwelf.so* /opt/pstack/lib/ && \
    cp -r /src/pstack/libprocman.so* /opt/pstack/lib/

FROM devel_base AS devel_auditwheel

COPY --from=pypa /opt/_internal/pipx/venvs /opt/_internal/pipx/venvs
COPY --from=pypa /opt/_internal/pipx/shared /opt/_internal/pipx/shared
COPY --from=pypa /opt/_internal/tools /opt/_internal/tools
COPY --from=pypa /opt/python/cp310-cp310 /opt/python/cp310-cp310
COPY etc/auditwheel_patch.py /opt/_internal/pipx/venvs/auditwheel/bin/patch.py
RUN /opt/_internal/pipx/venvs/auditwheel/bin/patch.py
RUN mkdir -p /opt/auditwheel/bin /opt/auditwheel/lib && \
    ln -sf /opt/_internal/pipx/venvs/auditwheel/bin/auditwheel /opt/auditwheel/bin/auditwheel && \
    ln -sf /opt/_internal/pipx/venvs/patchelf/bin/patchelf /opt/auditwheel/bin/patchelf
COPY --from=pypa /usr/local/lib/libcrypt.so.2 /opt/auditwheel/lib/libcrypt.so.2

FROM devel_base AS devel_tools

RUN apt-get update && \
    DEBIAN_FRONTEND="noninteractive" \
    apt-get install -y \
    --allow-unauthenticated \
    --no-install-recommends \
    clang-format-7 \
    sysstat \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN mkdir -p /opt/tools/bin /opt/tools/lib && \
    PYTHONUSERBASE=/opt/tools \
    pip3 install --no-cache-dir --user \
    sphinx \
    sphinx-rtd-theme \
    myst-parser \
    docutils==0.16 \
    pylint==2.12.2 \
    pylint-quotes \
    pycodestyle \
    xmlrunner \
    jupyter \
    tqdm \
    nvidia-nsys-cli

RUN apt-get update && \
    DEBIAN_FRONTEND="noninteractive" \
    apt-get install -y \
    --allow-unauthenticated \
    --no-install-recommends \
    nsight-compute && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    cp /usr/lib/nsight-compute/target/linux-desktop-glibc_2_11_3-x64/nv-nsight-cu-cli /opt/tools/ncu

RUN cp -rf /usr/lib/llvm-7/bin/clang-format /opt/tools/bin/clang-format && \
    cp -rf /usr/lib/x86_64-linux-gnu/libLLVM-7.so.1 /opt/tools/lib/ && \
    cp -rf /lib/x86_64-linux-gnu/libbsd.so.0.10.0 /opt/tools/lib/ && \
    ln -sf libbsd.so.0.10.0 /opt/tools/lib/libbsd.so.0 && \
    cp -rf /usr/lib/x86_64-linux-gnu/libedit.so.2.0.63 /opt/tools/lib/ && \
    ln -sf libedit.so.2.0.63 /opt/tools/lib/libedit.so.2 && \
    ln -sf /usr/local/cuda/bin/cuda-gdb /opt/tools/bin/gdb

FROM devel_base AS devel_dl

RUN mkdir -p /opt/dl && \
    PYTHONUSERBASE=/opt/dl \
    pip3 install --no-cache-dir --user \
    nvidia-tensorflow \
    numpy==1.21.1 \
    astor==0.8.1 \
    pyarrow \
    pandas
RUN mkdir -p /opt/dl/lib/python3.8/site-packages/tensorflow_core/include/third_party/gpus/cuda/ && \
    ln -sf /usr/local/cuda/include \
    /opt/dl/lib/python3.8/site-packages/tensorflow_core/include/third_party/gpus/cuda/include

FROM devel_base AS devel_sparsehash

COPY sparsehash/build.sh /src/sparsehash/
RUN cd /src/sparsehash && \
    ./build.sh /opt/sparsehash

FROM devel_base AS devel_arrow

ENV HYBRIDBACKEND_USE_CXX11_ABI=0 \
    HYBRIDBACKEND_WITH_ARROW_HDFS=ON \
    HYBRIDBACKEND_WITH_ARROW_S3=ON \
    TMP=/tmp
ADD arrow/build.sh /src/arrow/build.sh
ADD arrow/patches /src/arrow/patches
RUN cd /src/arrow/ && \
    ARROW_USE_CXX11_ABI=${HYBRIDBACKEND_USE_CXX11_ABI} \
    ARROW_HDFS=${HYBRIDBACKEND_WITH_ARROW_HDFS} \
    ARROW_S3=${HYBRIDBACKEND_WITH_ARROW_S3} \
    ./build.sh /opt/arrow

FROM devel_base AS devel_tensorflow

ARG TF_REPO=https://github.com/NVIDIA/tensorflow.git
ARG TF_COMMIT=r1.15.5+nv22.12
RUN mkdir -p /opt && \
    git clone ${TF_REPO} /opt/tensorflow
RUN cd /opt/tensorflow && \
    git checkout ${TF_COMMIT}

FROM devel_base

# Install Auditwheel
COPY --from=devel_auditwheel /opt/_internal /opt/_internal
COPY --from=devel_auditwheel /opt/python /opt/python
COPY --from=devel_auditwheel /opt/auditwheel /usr/local

# Install Pstack
COPY --from=devel_pstack /opt/pstack /usr/local

# Install SparseHash
COPY --from=devel_sparsehash /opt/sparsehash /opt/sparsehash
ENV SPARSEHASH_HOME=/opt/sparsehash

# Install Arrow
COPY --from=devel_arrow /opt/arrow /opt/arrow
ENV ARROW_HOME=/opt/arrow

# Install TensorFlow
COPY --from=devel_tensorflow /opt/tensorflow /opt/tensorflow
ENV TENSORFLOW_HOME=/opt/tensorflow

# Install Tools
COPY --from=devel_tools /opt/tools /usr/local

# Install Packages for Deep Learning
COPY --from=devel_dl /opt/dl /usr/local

# Configure HybridBackend
ENV HYBRIDBACKEND_WITH_CUDA=ON \
    HYBRIDBACKEND_WITH_NCCL=ON \
    HYBRIDBACKEND_WITH_ARROW_ZEROCOPY=ON \
    HYBRIDBACKEND_USE_CXX11_ABI=0 \
    HYBRIDBACKEND_WHEEL_ALIAS=-tf115-cu116 \
    TENSORFLOW_DISTRO=1015 \
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib